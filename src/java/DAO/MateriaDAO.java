/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Tue Sep 16 23:29:06 CDT 2014
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */
package DAO;

import DTO.Materia;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

/**
 * This class provides methods to populate DB Table of materia
 */
public class MateriaDAO {
    /* SQL to insert data */

    private static final String SQL_INSERT =
            "INSERT INTO materia ("
            + "idMateria, nombre, creditos"
            + ") VALUES (?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
            "SELECT "
            + "idMateria, nombre, creditos "
            + "FROM materia WHERE "
            + "idMateria = ?";
    private static final String SQL_SELECTALL =
            "SELECT "
            + "idMateria, nombre, creditos "
            + "FROM materia";

    /* SQL to update data */
    private static final String SQL_UPDATE =
            "UPDATE materia SET "
            + "nombre = ?, creditos = ? "
            + "WHERE "
            + "idMateria = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
            "SET FOREIGN_KEY_CHECKS=0;"
            + "DELETE FROM materia WHERE idMateria = ?;"
            + "SET FOREIGN_KEY_CHECKS=1;";

    /**
     * Create a new record in Database.
     *
     * @param bean The Object to be inserted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public List loadALL(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECTALL);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0) {
                return results;
            } else {
                return null;
            }
        } finally {
            close(rs);
            close(ps);
            if (conn != null) {
                conn.close();
            }
        }
    }

    public void create(Materia bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdmateria());
            ps.setString(2, bean.getNombre());
            ps.setString(3, bean.getCreditos());
            ps.executeUpdate();
        } finally {
            close(ps);
            if (conn != null) {
                conn.close();
            }
        }
    }

    /**
     * Retrive a record from Database.
     *
     * @param beanKey The PK Object to be retrived.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public Materia load(Materia key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdmateria());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0) {
                return (Materia) results.get(0);
            } else {
                return null;
            }
        } finally {
            close(rs);
            close(ps);
            if (conn != null) {
                conn.close();
            }
        }
    }

    /**
     * Update a record in Database.
     *
     * @param bean The Object to be saved.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void update(Materia bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombre());
            ps.setString(2, bean.getCreditos());
            ps.setInt(3, bean.getIdmateria());
            ps.executeUpdate();
        } finally {
            close(ps);
            if (conn != null) {
                conn.close();
            }
        }
    }

    /**
     * Create a new record in Database.
     *
     * @param bean The PK Object to be deleted.
     * @param conn JDBC Connection.
     * @exception SQLException if something is wrong.
     */
    public void delete(Materia key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdmateria());
            ps.executeUpdate();
        } finally {
            close(ps);
            if (conn != null) {
                conn.close();
            }
        }
    }

    /**
     * Populate the ResultSet.
     *
     * @param rs The ResultSet.
     * @return The Object to retrieve from DB.
     * @exception SQLException if something is wrong.
     */
    protected List<Materia> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Materia>();
        while (rs.next()) {
            Materia bean = new Materia();
            bean.setIdmateria(rs.getInt("idMateria"));
            bean.setNombre(rs.getString("nombre"));
            if (rs.wasNull()) {
                bean.setNombre(null);
            }
            bean.setCreditos(rs.getString("creditos"));
            if (rs.wasNull()) {
                bean.setCreditos(null);
            }
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     *
     * @param stmt Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     *
     * @param rs ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
            }
        }
    }
}